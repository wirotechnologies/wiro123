<?php return array(PHP_INT_MAX, static function () {

    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\Table'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Table')),
            clone ($p['Doctrine\\ORM\\Mapping\\Index'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Index')),
            clone $p['Doctrine\\ORM\\Mapping\\Index'],
            clone $p['Doctrine\\ORM\\Mapping\\Index'],
            clone ($p['Doctrine\\ORM\\Mapping\\UniqueConstraint'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\UniqueConstraint')),
            clone ($p['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
        ],
        null,
        [
            'stdClass' => [
                'name' => [
                    'contracts',
                    'IDX_950A9732757A812',
                    'IDX_950A973E266F206',
                    'IDX_950A973BA3D72F6',
                    'number_unique',
                ],
                'indexes' => [
                    [
                        $o[1],
                        $o[2],
                        $o[3],
                    ],
                ],
                'uniqueConstraints' => [
                    [
                        $o[4],
                    ],
                ],
                'columns' => [
                    1 => [
                        'id_contract_types',
                    ],
                    [
                        'id_customers',
                    ],
                    [
                        'id_recurrence',
                    ],
                    [
                        'number',
                    ],
                ],
            ],
        ],
        [
            $o[0],
            $o[5],
        ],
        []
    );

});
